g++

############################
-shared
    Produce a shared object which can then be linked with other objects to form an executable.  Not all
    systems support this option.  For predictable results, you must also specify the same set of options used
    for compilation (-fpic, -fPIC, or model suboptions) when you specify this linker option.[1]

############################
-fPIC
    If supported for the target machine, emit position-independent code, suitable for dynamic linking and
    avoiding any limit on the size of the global offset table.  This option makes a difference on the m68k,
    PowerPC and SPARC.

    Position-independent code requires special support, and therefore works only on certain machines.

    When this flag is set, the macros "__pic__" and "__PIC__" are defined to 2.

############################
-D name
    Predefine name as a macro, with definition 1.


############################
-D name=definition The contents of definition are tokenized and processed as if
they appeared during translation phase three in a #define directive.  In
particular, the definition will be truncated by embedded newline characters.

			  If you are invoking the preprocessor from a shell or shell-like
program you may need to use the shell's quoting syntax to protect characters
such as spaces that have a meaning in the shell syntax.

			  If you wish to define a function-like macro on the command line,
write its argument list with surrounding parentheses before the equals sign (if
any).  Parentheses are meaningful to most shells, so you will need to quote the
option.  With sh and csh, -D'name(args...)=definition' works.

			  -D and -U options are processed in the order they are given on the
command line.  All -imacros file and -include file options are processed after
all -D and -U options.
