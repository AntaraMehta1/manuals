MG5_aMC>tutorial MadLoop
tutorial_MadLoop:
        You have entered tutorial mode. This will introduce you to the main
        syntax options for MadLoop which are mostly similar to the MadGraph5_aMC@NLO one.
        If you have not done so already, please follow MadGraph5_aMC@NLO tutorial before
        this one.

        Remember that exactly as in MadGraph5, you can learn more about the different
        options for any command by typing
        MG5_aMC> help A_CMD
        And to see a list of all commands, use
        MG5_aMC> help

        MadLoop is the part of MadGraph5_aMC@NLO used to generate the code for
        evaluating the loop diagrams. This tutorial teaches you how to use MadLoop
        as standalone tool for studying loops within particular processes.
        Therefore in this mode, you can only consider definite processes, meaning
        without multiparticle labels.

        This tutorial has three parts:
        a) How to generate a process.
        b) How to cross-check / profile an output.
        c) How to compute the loop matrix element squared for local phase-space points.

        Let's start with the first point, how to generate a process with MadLoop in
        standalone mode. Keep in mind that this means only the loop and born diagrams
        are generated.

        MG5_aMC>generate g g > d d~ [virt=QCD]

        Note that a space is mandatory between the particle names and that '[virt=QCD]'
        specifies that you want to consider QCD NLO corrections. The keyword option
        'virt' before '=' within the squared brackets precisely specifies you are only
        interested in the virtual contribution.

MG5_aMC>
MG5_aMC>
MG5_aMC>
MG5_aMC>generate g g > d d~ [virt=QCD]
INFO: Chosen coupling orders configuration: (QED=0,QCD=*)
INFO: Contributing diagrams generated: 3 Born, 36(+9) loops, 21 R2, 78 UV
Process generated in 0.915 s
tutorial_MadLoop:
        You have just generated a new process.
        You can find more information on supported syntax by using:
        MG5_aMC>help generate
        To list all defined processes, type
        MG5_aMC>display processes

        You can display a pictorial representation of the diagrams with
        MG5_aMC> display diagrams
        Notice you can add the option 'loop' or 'born' if you only want those diagrams
        to be displayed.

        If you want to add a second process, you can use the add process command:
        MG5_aMC>add process e+ e- > d d~ [virt=QCD]
        But keep in mind that you must still consider only virtual corrections and
        cannot employ multiparticle labels. Also decay chains are not available for
        loops.

        At this stage you can export your processes.
        This is done simply by typing:

        MG5_aMC>output MY_FIRST_MADLOOP_RUN

        Notice that the standalone output mode (implicit in the above) is the only
        available for MadLoop standalone runs.

MG5_aMC>output MY_FIRST_MADLOOP_RUN
INFO: initialize a new standalone directory: MY_FIRST_MADLOOP_RUN
INFO: Generating Helas calls for process: g g > d d~ [ virt = QCD ]
INFO: Processing color information for loop process: g g > d d~ [ virt = QCD ]
INFO: Processing color information for born process: g g > d d~ [ virt = QCD ]
INFO: Creating color matrix  loop process: g g > d d~ [ virt = QCD ]
INFO: Creating files in directory /home/de3u14/lib/build/hep/MadGraph/MG5_aMC_v2_4_2/MY_FIRST_MADLOOP_RUN/SubProcesses/P0_gg_ddx
ALOHA: aloha creates FFV1 set of routines with options: L2
INFO: Computing diagram color coefficients
INFO: Drawing loop Feynman diagrams for Process: g g > d d~ [ virt = QCD ]
INFO: Generating born Feynman diagrams for Process: g g > d d~ [ virt = QCD ]
Generated helas calls for 1 subprocesses (45 diagrams) in 0.899 s
Wrote files for 10 OPP calls in 2.755 s
Export UFO model to MG4 format
ALOHA: aloha creates FFV1 routines
ALOHA: aloha creates VVVV1 set of routines with options: L2,P0
ALOHA: aloha creates VVV1 routines
ALOHA: aloha creates R2_GG_3 routines
ALOHA: aloha creates R2_GG_2 routines
ALOHA: aloha creates R2_GG_1 routines
ALOHA: aloha creates R2_QQ_1 routines
ALOHA: aloha creates R2_GG_1_R2_GG_2 routines
ALOHA: aloha creates R2_GG_1_R2_GG_3 routines
INFO: Use Fortran compiler gfortran
INFO: Use c++ compiler g++
INFO: Running make for Helas
INFO: Running make for Model
Output to directory /home/de3u14/lib/build/hep/MadGraph/MG5_aMC_v2_4_2/MY_FIRST_MADLOOP_RUN done.
tutorial_MadLoop:
        If you are following the tutorial, a directory MY_FIRST_MADLOOP_RUN has
        been created under your MadGraph5_aMC@NLO installation directory.

        The code for the evaluation of the squared loop matrix element is in
        'SubProcesses/P0_<shell_proc_name>/'. There, you can compile and edit
        running parameters from 'MadloopParams.dat' and then run the code with './check'
        Alternatively, for a simple quick run, type:

        MG5_aMC>launch -f

        This computes the squared matrix element for a given PS points.
        For the purpose of this tutorial, the option '-f' is added to automatically skip
        the edition of the cards and phase-space point specification.

MG5_aMC>
MG5_aMC>launch -f
Initializing process gg > ddx.


|================================================================================================
|| Results for process gg > ddx
|================================================================================================
|| Phase-Space point specification (E,px,py,pz)
|
|  5.0000000000000000e+02  0.0000000000000000e+00  0.0000000000000000e+00  5.0000000000000000e+02
|  5.0000000000000000e+02  0.0000000000000000e+00  0.0000000000000000e+00 -5.0000000000000000e+02
|  4.9999999999999977e+02  1.1092428444383280e+02  4.4483078948812141e+02 -1.9955292993087880e+02
|  5.0000000000000000e+02 -1.1092428444383280e+02 -4.4483078948812141e+02  1.9955292993087869e+02
|
| Stable kinematic configuration (SPS).
| Estimated relative accuracy = 1.1e-14
|
|| Total(*) Born contribution (GeV^0):
|    Born        =  5.3271605093588181e-01
|| Total(*) virtual contribution normalized with born*alpha_S/(2*pi):
|    Finite      = -5.4025330528448428e+01
|    Single pole =  2.3447596755873811e+01
|    Double pole = -8.6666666666666679e+00
|  (*) The results above sum all starred contributions below
|
|| All Born contributions are of split orders *(QCD=4)
|
|| All virtual contributions are of split orders *(QCD=6)
|================================================================================================


tutorial_MadLoop:
        You just launched the MadLoop standalone evalutation of the squared loop matrix
        element for (a/many) specific process(es) for a random Phase-Space point.
        The two processes proposed in this tutorial were g g > d d~ and e+ e- > d d~.
        You can check that you get the right double pole normalized with respect to
        the born*(alpha_s/2*pi), namely -26/3 and -8/3 respectively.

        Now this tutorial will introduce you to two checking functionalities for the
        evaluation of the contributions of virtual origin.
        Start by typing:

        MG5_aMC>check g g > d d~ [virt=QCD]

        This will test lorentz and crossing invariance as well as of the gauge
        invariance check from the ward identity for the initial state gluon.
        You can add an option after check to specify to perform only one definite check.
        Notice that the check functionality is only available for MadLoop standalone
        runs (those with the 'virt=' option).

MG5_aMC>
